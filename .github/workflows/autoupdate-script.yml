name: Run Deno Task and Commit Changes

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run-deno-task:
    runs-on: ubuntu-latest

    steps:
      - name: Lists current directory
        run: ls

      - name: Full Working Directory
        run: pwd

      - name: Set up Environmental Variables
        run: |
          echo "STRATZ_BEARER_TOKEN=${{ secrets.STRATZ_BEARER_TOKEN }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Deno
        uses: denolib/setup-deno@v2

      - name: Run Deno task
        run: deno task update

      - name: Check for changes
        run: |
          if git diff --quiet; then
            echo "No changes to commit. Skipping..."
            exit 0
          fi

      - name: Configure Git with Deploy Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY_PRIVATE }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global user.email "muelltyl@gmail.com"
          git config --global user.name "Tyler Mueller"

      - name: Get latest tag
        id: get_latest_tag
        run: |
          TAG=$(git describe --abbrev=0 --tags --always)
          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo $TAG


      - name: Increment patch version
        id: increment_version
        run: |
          TAG=${{ env.TAG }}
          NEW_TAG=$(echo ${TAG} | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
          echo $NEW_TAG
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Automatic commit by Deno task update"

        env:
          DEPLOY_KEY_PRIVATE: ${{ secrets.DEPLOY_KEY_PRIVATE }}

      - name: Create new tag
        run: |
          echo ${{ env.NEW_TAG }}
          git tag -a ${{ env.NEW_TAG }} -m "Version ${{ env.NEW_TAG }}"
          git push origin ${{ env.NEW_TAG }}
